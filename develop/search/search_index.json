{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Overview talhelper is a tool to help creating Talos configuration files with GitOps in mind. It was inspired by a python script written by @bjw-s . In a nutshell, this is what talhelper does step by step behind the door: Read and validate talconfig.yaml . Read and decrypt talsecret.yaml or talsecret.sops.yaml with sops if needed. Read and decrypt talenv.yaml or talenv.sops.yaml with sops if needed and load them into environment variables. Do envsubst if needed. Validate and generate Talos and machine config files inside ./clusterconfig directory. Generate .gitignore file so you don't commit the generated files to the public. Why should I use Talhelper The main reason to use talhelper instead of talosctl gen config command to generate Talos machineconfig files is because you want to have them version controlled in your git repository which is currently not possible yet with talosctl . Currently, to create Talos configuration files using the official talosctl tool your steps are: Run talosctl gen config <cluster-name> <cluster-endpoint> and it will generate controlplane.yaml , worker.yaml , talosconfig in the current working directory. Copy and modify those files manually according to your nodes. Run talosctl apply-config --insecure -n <ip-address> --file <your-modified-file.yaml> for each node. This process is fine if you just want to do this once and forget about it. But if you're like me (and many others ), you might want to \"GitOpsified\" this process. So here's where you might want to use talhelper . With talhelper , the steps will become like this: Create a talconfig.yaml . Run talhelper gensecret > talsecret.sops.yaml and encrypt it with sops sops -e -i talsecret.sops.yaml . Run talhelper genconfig . Run talosctl apply-config --insecure -n <ip-address> --file ./clusterconfig/<cluster-name>-<hostname>.yaml for each node. Yes there are more steps needed. But now you can commit your talconfig.yaml and the encrypted talsecret.sops.yaml to your gitops repository and get your whole cluster version controlled. To get started, hop over to the Getting Started section. Alternatives There are some alternatives you can consider instead of talhelper . The official Terraform provider The official Pulumi provider Bug report and feature request If you have encountered any bug or you want to request a new feature, please open an issue at GitHub.","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#overview","text":"talhelper is a tool to help creating Talos configuration files with GitOps in mind. It was inspired by a python script written by @bjw-s . In a nutshell, this is what talhelper does step by step behind the door: Read and validate talconfig.yaml . Read and decrypt talsecret.yaml or talsecret.sops.yaml with sops if needed. Read and decrypt talenv.yaml or talenv.sops.yaml with sops if needed and load them into environment variables. Do envsubst if needed. Validate and generate Talos and machine config files inside ./clusterconfig directory. Generate .gitignore file so you don't commit the generated files to the public.","title":"Overview"},{"location":"#why-should-i-use-talhelper","text":"The main reason to use talhelper instead of talosctl gen config command to generate Talos machineconfig files is because you want to have them version controlled in your git repository which is currently not possible yet with talosctl . Currently, to create Talos configuration files using the official talosctl tool your steps are: Run talosctl gen config <cluster-name> <cluster-endpoint> and it will generate controlplane.yaml , worker.yaml , talosconfig in the current working directory. Copy and modify those files manually according to your nodes. Run talosctl apply-config --insecure -n <ip-address> --file <your-modified-file.yaml> for each node. This process is fine if you just want to do this once and forget about it. But if you're like me (and many others ), you might want to \"GitOpsified\" this process. So here's where you might want to use talhelper . With talhelper , the steps will become like this: Create a talconfig.yaml . Run talhelper gensecret > talsecret.sops.yaml and encrypt it with sops sops -e -i talsecret.sops.yaml . Run talhelper genconfig . Run talosctl apply-config --insecure -n <ip-address> --file ./clusterconfig/<cluster-name>-<hostname>.yaml for each node. Yes there are more steps needed. But now you can commit your talconfig.yaml and the encrypted talsecret.sops.yaml to your gitops repository and get your whole cluster version controlled. To get started, hop over to the Getting Started section.","title":"Why should I use Talhelper"},{"location":"#alternatives","text":"There are some alternatives you can consider instead of talhelper . The official Terraform provider The official Pulumi provider","title":"Alternatives"},{"location":"#bug-report-and-feature-request","text":"If you have encountered any bug or you want to request a new feature, please open an issue at GitHub.","title":"Bug report and feature request"},{"location":"contributing/","text":"Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated ! If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the label \"enhancement\". Don't forget to give the project a star! Fork the project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your changes ( git commit -m 'feat: add some AmazingFeature ) Push to the branch ( git push origin feature/AmazingFeature ) Open a Pull Request","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated ! If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the label \"enhancement\". Don't forget to give the project a star! Fork the project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your changes ( git commit -m 'feat: add some AmazingFeature ) Push to the branch ( git push origin feature/AmazingFeature ) Open a Pull Request","title":"Contributing"},{"location":"getting-started/","text":"Getting Started Before you begin There are some prerequisites before you start using talhelper . You need talhelper installed on your workstation (of course), head over to the Installation page for more detail. You also need sops installed and configured with your preferred encryption tool ( age , pgp , etc). If you want to use doppler instead, there's an alternative way to do this thanks to @truxnell which you can read here You also need talosctl installed on your workstation to apply the generated machine config files. Once you have all of the above conditions met, you can now start with the Scenario that suits your current situation. Scenarios Depending on which situation you are currently in before integrating talhelper to your stack, here are some simplified steps to get you started: You already have a Talos cluster running If you already have your Talos Kubernetes cluster up and running but you haven't GitOps it yet. Here are the steps you need to do: Get your node's machineconfig using talosctl : talosctl -n <node-ip> read /system/state/config.yaml > /tmp/machineconfig.yaml . Run talhelper gensecret -f /tmp/machineconfig.yaml > talsecret.sops.yaml . This command will create a talsecret.sops.yaml file with all your current cluster secrets. Encrypt the secret with sops : sops -e -i talsecret.sops.yaml (you will need sops configured properly ). Create a talconfig.yaml based on your current cluster, here's the example template . For all the available options, look at the Configuration Reference Run talhelper genconfig and the output files will be in ./clusterconfig by default. You can now do talosctl apply-config commands to the generated files. Commit your talconfig.yaml and talsecret.yaml in your git repository. Note Please don't push the generated files into your public git repository. By default talhelper will create a .gitignore file to ignore the generated files for you unless you use --no-gitignore flag. The generated files contain unencrypted secrets and you don't want people to get a hand on them. You are starting from scratch If you are creating a Talos Kubernetes cluster from scratch and you want to use talhelper , that's awesome! Here are the steps you need to do: Create a talconfig.yaml according to your needs, here's the example template . For all the available options, look at the Configuration Reference Run talhelper gensecret > talsecret.sops.yaml . This command will create a talsecret.sops.yaml file with your future cluster secrets. Encrypt the secret with sops : sops -e -i talsecret.sops.yaml (you will need sops configured properly ). Run talhelper genconfig and the output files will be in ./clusterconfig by default. You can now do talosctl apply-config commands to the generated files. Commit your talconfig.yaml and talsecret.yaml in your git repository. Note Please don't push the generated files into your public git repository. By default talhelper will create a .gitignore file to ignore the generated files for you unless you use --no-gitignore flag. The generated files contain unencrypted secrets and you don't want people to get a hand on them.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#before-you-begin","text":"There are some prerequisites before you start using talhelper . You need talhelper installed on your workstation (of course), head over to the Installation page for more detail. You also need sops installed and configured with your preferred encryption tool ( age , pgp , etc). If you want to use doppler instead, there's an alternative way to do this thanks to @truxnell which you can read here You also need talosctl installed on your workstation to apply the generated machine config files. Once you have all of the above conditions met, you can now start with the Scenario that suits your current situation.","title":"Before you begin"},{"location":"getting-started/#scenarios","text":"Depending on which situation you are currently in before integrating talhelper to your stack, here are some simplified steps to get you started:","title":"Scenarios"},{"location":"getting-started/#you-already-have-a-talos-cluster-running","text":"If you already have your Talos Kubernetes cluster up and running but you haven't GitOps it yet. Here are the steps you need to do: Get your node's machineconfig using talosctl : talosctl -n <node-ip> read /system/state/config.yaml > /tmp/machineconfig.yaml . Run talhelper gensecret -f /tmp/machineconfig.yaml > talsecret.sops.yaml . This command will create a talsecret.sops.yaml file with all your current cluster secrets. Encrypt the secret with sops : sops -e -i talsecret.sops.yaml (you will need sops configured properly ). Create a talconfig.yaml based on your current cluster, here's the example template . For all the available options, look at the Configuration Reference Run talhelper genconfig and the output files will be in ./clusterconfig by default. You can now do talosctl apply-config commands to the generated files. Commit your talconfig.yaml and talsecret.yaml in your git repository. Note Please don't push the generated files into your public git repository. By default talhelper will create a .gitignore file to ignore the generated files for you unless you use --no-gitignore flag. The generated files contain unencrypted secrets and you don't want people to get a hand on them.","title":"You already have a Talos cluster running"},{"location":"getting-started/#you-are-starting-from-scratch","text":"If you are creating a Talos Kubernetes cluster from scratch and you want to use talhelper , that's awesome! Here are the steps you need to do: Create a talconfig.yaml according to your needs, here's the example template . For all the available options, look at the Configuration Reference Run talhelper gensecret > talsecret.sops.yaml . This command will create a talsecret.sops.yaml file with your future cluster secrets. Encrypt the secret with sops : sops -e -i talsecret.sops.yaml (you will need sops configured properly ). Run talhelper genconfig and the output files will be in ./clusterconfig by default. You can now do talosctl apply-config commands to the generated files. Commit your talconfig.yaml and talsecret.yaml in your git repository. Note Please don't push the generated files into your public git repository. By default talhelper will create a .gitignore file to ignore the generated files for you unless you use --no-gitignore flag. The generated files contain unencrypted secrets and you don't want people to get a hand on them.","title":"You are starting from scratch"},{"location":"guides/","text":"Guides Example talconfig.yaml A minimal talconfig.yaml file will look like this: --- clusterName : my-cluster endpoint : https://192.168.200.10:6443 nodes : - hostname : master controlPlane : true ipAddress : 192.168.200.11 installDisk : /dev/sda Let's say you want to add labels to the master node and add another worker node named warmachine , you can modify talconfig.yaml like so: --- clusterName : my-cluster endpoint : https://192.168.200.10:6443 nodes : - hostname : master controlPlane : true ipAddress : 192.168.200.11 installDisk : /dev/sda nodeLabels : rack : rack1 - hostname : warmachine controlPlane : false ipAddress : 192.168.200.12 installDiskSelector : size : 128GB Then you can run talhelper genconfig . Here's a more detailed example talconfig.yaml . To see all the available options of the configuration file, head over to Configuration Reference . Configuring SOPS for Talhelper sops is a simple and flexible tool for managing secrets. If you haven't used sops before, the easiest way to get started is by using age as the encryption tool of choice. To configure talhelper to use sops to encrypt and decrypt your secrets, here's the simplified step by step you can do: Install both sops and age into your system. Run age-keygen -o <sops-config-dir>/age/keys.txt . By default, <sops-config-dir> will be in $XDG_CONFIG_HOME/sops on Linux, $HOME/Library/Application Support/sops on MacOS, and %AppData%\\sops on Windows. In the directory where your talenv.sops.yaml , and talsecrets.sops.yaml lives, create a .sops.yaml file with this content: --- creation_rules : - age : >- <age-public-key> ## get this in the keys.txt file from previous step Now, if you encrypt your talenv.sops.yaml and talsecret.sops.yaml files with sops , talhelper will be able to decrypt it when generating config files. Using Doppler instead of SOPS If you don't want to use sops as your secret management, you can use Doppler instead (or any other secret managers that can inject environment variables to the shell). Thanks to @truxnell for this genius idea. Here's the simplified step by step to achieve this: In the place where you want to use environment secrets, put it in talconfig.yaml file with ${} placeholder like this: controlPlane : inlinePatch : cluster : aescbcEncryptionSecret : ${AESCBCENCYPTIONKEY} In doppler , create a project named i.e \"talhelper\". In that project, create a config i.e \"env\" that stores key and value of the secret like AESCBCENCYPTIONKEY: <secret>. . Run doppler CLI command that sets environment variable before running the talhelper command i.e: doppler run -p talhelper -c env talhelper genconfig . Thanks to @jtcressy you can also make use of talsecret.yaml file (which is a better way than doing inlinePatch ). Note that you can only put the cluster secrets known by Talos here (you can use talhelper gensecret command and modify it). Here's the simplified step by step to achieve this: In talsecret.yaml file, put all your secrets with ${} placeholder like this: cluster : id : ${CLUSTERNAME} secret : ${CLUSTERSECRET} secrets : bootstraptoken : ${BOOTSTRAPTOKEN} secretboxencryptionsecret : ${AESCBCENCYPTIONKEY} trustdinfo : token : ${TRUSTDTOKEN} certs : etcd : crt : ${ETCDCERT} key : ${ETCDKEY} k8s : crt : ${K8SCERT} key : ${K8SKEY} k8saggregator : crt : ${K8SAGGCERT} key : ${K8SAGGKEY} k8sserviceaccount : key : ${K8SSAKEY} os : crt : ${OSCERT} key : ${OSKEY} 2. In doppler , create a project named i.e \"talhelper\". In that project, create a config i.e \"env\" that stores key and value of the secret like AESCBCENCYPTIONKEY: <secret>. . 3. Run doppler CLI command that sets environment variable before running the talhelper command i.e: doppler run -p talhelper -c env talhelper genconfig . Shell completion Depending on how you install talhelper , you might not need to do anything to get autocompletion for talhelper commands i.e if you install using the Nix Flakes or AUR. If you don't get it working out of the box, you can use talhelper completion command to generate autocompletion for your shell. bash You will need bash-completion installed and configured on your system first. And then you can put this line somewhere inside your ~/.bashrc file: source < ( talhelper completion bash ) After reloading your shell, autocompletion should be working. To enable bash autocompletion in current session of shell, source the ~/.bashrc file: source ~/.bashrc fish Put this line somewhere inside your ~/.config/fish/config.fish file: talhelper completion fish | source Another way is to put the generated file into ~/.config/fish/completions/talhelper.fish file: talhelper completion fish > ~/.config/fish/completions/talhelper.fish After reloading your shell, autocompletion should be working. zsh Put this line somewhere inside your ~/.zshrc : source < ( talhelper completion zsh ) After reloading your shell, autocompletion should be working. To enable zsh autocompletion in current session of shell, source the ~/.zshrc file: source ~/.zshrc powershell Append the generated file into $PROFILE : talhelper completion powershell >> $PROFILE After reloading your shell, autocompletion should be working.","title":"Guides"},{"location":"guides/#guides","text":"","title":"Guides"},{"location":"guides/#example-talconfigyaml","text":"A minimal talconfig.yaml file will look like this: --- clusterName : my-cluster endpoint : https://192.168.200.10:6443 nodes : - hostname : master controlPlane : true ipAddress : 192.168.200.11 installDisk : /dev/sda Let's say you want to add labels to the master node and add another worker node named warmachine , you can modify talconfig.yaml like so: --- clusterName : my-cluster endpoint : https://192.168.200.10:6443 nodes : - hostname : master controlPlane : true ipAddress : 192.168.200.11 installDisk : /dev/sda nodeLabels : rack : rack1 - hostname : warmachine controlPlane : false ipAddress : 192.168.200.12 installDiskSelector : size : 128GB Then you can run talhelper genconfig . Here's a more detailed example talconfig.yaml . To see all the available options of the configuration file, head over to Configuration Reference .","title":"Example talconfig.yaml"},{"location":"guides/#configuring-sops-for-talhelper","text":"sops is a simple and flexible tool for managing secrets. If you haven't used sops before, the easiest way to get started is by using age as the encryption tool of choice. To configure talhelper to use sops to encrypt and decrypt your secrets, here's the simplified step by step you can do: Install both sops and age into your system. Run age-keygen -o <sops-config-dir>/age/keys.txt . By default, <sops-config-dir> will be in $XDG_CONFIG_HOME/sops on Linux, $HOME/Library/Application Support/sops on MacOS, and %AppData%\\sops on Windows. In the directory where your talenv.sops.yaml , and talsecrets.sops.yaml lives, create a .sops.yaml file with this content: --- creation_rules : - age : >- <age-public-key> ## get this in the keys.txt file from previous step Now, if you encrypt your talenv.sops.yaml and talsecret.sops.yaml files with sops , talhelper will be able to decrypt it when generating config files.","title":"Configuring SOPS for Talhelper"},{"location":"guides/#using-doppler-instead-of-sops","text":"If you don't want to use sops as your secret management, you can use Doppler instead (or any other secret managers that can inject environment variables to the shell). Thanks to @truxnell for this genius idea. Here's the simplified step by step to achieve this: In the place where you want to use environment secrets, put it in talconfig.yaml file with ${} placeholder like this: controlPlane : inlinePatch : cluster : aescbcEncryptionSecret : ${AESCBCENCYPTIONKEY} In doppler , create a project named i.e \"talhelper\". In that project, create a config i.e \"env\" that stores key and value of the secret like AESCBCENCYPTIONKEY: <secret>. . Run doppler CLI command that sets environment variable before running the talhelper command i.e: doppler run -p talhelper -c env talhelper genconfig . Thanks to @jtcressy you can also make use of talsecret.yaml file (which is a better way than doing inlinePatch ). Note that you can only put the cluster secrets known by Talos here (you can use talhelper gensecret command and modify it). Here's the simplified step by step to achieve this: In talsecret.yaml file, put all your secrets with ${} placeholder like this: cluster : id : ${CLUSTERNAME} secret : ${CLUSTERSECRET} secrets : bootstraptoken : ${BOOTSTRAPTOKEN} secretboxencryptionsecret : ${AESCBCENCYPTIONKEY} trustdinfo : token : ${TRUSTDTOKEN} certs : etcd : crt : ${ETCDCERT} key : ${ETCDKEY} k8s : crt : ${K8SCERT} key : ${K8SKEY} k8saggregator : crt : ${K8SAGGCERT} key : ${K8SAGGKEY} k8sserviceaccount : key : ${K8SSAKEY} os : crt : ${OSCERT} key : ${OSKEY} 2. In doppler , create a project named i.e \"talhelper\". In that project, create a config i.e \"env\" that stores key and value of the secret like AESCBCENCYPTIONKEY: <secret>. . 3. Run doppler CLI command that sets environment variable before running the talhelper command i.e: doppler run -p talhelper -c env talhelper genconfig .","title":"Using Doppler instead of SOPS"},{"location":"guides/#shell-completion","text":"Depending on how you install talhelper , you might not need to do anything to get autocompletion for talhelper commands i.e if you install using the Nix Flakes or AUR. If you don't get it working out of the box, you can use talhelper completion command to generate autocompletion for your shell. bash You will need bash-completion installed and configured on your system first. And then you can put this line somewhere inside your ~/.bashrc file: source < ( talhelper completion bash ) After reloading your shell, autocompletion should be working. To enable bash autocompletion in current session of shell, source the ~/.bashrc file: source ~/.bashrc fish Put this line somewhere inside your ~/.config/fish/config.fish file: talhelper completion fish | source Another way is to put the generated file into ~/.config/fish/completions/talhelper.fish file: talhelper completion fish > ~/.config/fish/completions/talhelper.fish After reloading your shell, autocompletion should be working. zsh Put this line somewhere inside your ~/.zshrc : source < ( talhelper completion zsh ) After reloading your shell, autocompletion should be working. To enable zsh autocompletion in current session of shell, source the ~/.zshrc file: source ~/.zshrc powershell Append the generated file into $PROFILE : talhelper completion powershell >> $PROFILE After reloading your shell, autocompletion should be working.","title":"Shell completion"},{"location":"installation/","text":"Installation There are several ways to install talhelper to your workstation. Using aqua You can get talhelper from the standard registry as budimanjojo/talhelper . Using asdf You can get talhelper with a plugin maintained by @bjw-s . Add the plugin asdf plugin add talhelper Install the program asdf install talhelper latest Using Homebrew You can get talhelper from the official formulae (thanks to @ishioni ). brew install talhelper Using Nix Flakes You can get talhelper as Nix Flakes from the repository . Add the repository as input in your flake.nix file { inputs = { talhelper . url = \"github:budimanjojo/talhelper\" ; } } The package is now available at packages.<system>.default of the flake. You can call it in your home.packages or environment.systemPackages or devShell by referencing the input as inputs.talhelper.packages.<system>.default . Using AUR You can get talhelper from AUR using any AUR helper if you're Arch Linux user btw. Example using yay : yay -S talhelper-bin Using Scoop You can get talhelper from Scoop if you're a Windows user (thanks to @dedene ). scoop bucket add budimanjojo https :// github . com / budimanjojo / talhelper . git scoop install talhelper Using one liner with jpillora You can get talhelper using this one liner using tool provided by jpillora . curl https://i.jpillora.com/budimanjojo/talhelper! | sudo bash From the release page If none of the above works for you, you can download the archived binary for your system from the latest release page . Please let me know if you want to help with adding new installation method by creating a new issue .","title":"Installation"},{"location":"installation/#installation","text":"There are several ways to install talhelper to your workstation.","title":"Installation"},{"location":"installation/#using-aqua","text":"You can get talhelper from the standard registry as budimanjojo/talhelper .","title":"Using aqua"},{"location":"installation/#using-asdf","text":"You can get talhelper with a plugin maintained by @bjw-s . Add the plugin asdf plugin add talhelper Install the program asdf install talhelper latest","title":"Using asdf"},{"location":"installation/#using-homebrew","text":"You can get talhelper from the official formulae (thanks to @ishioni ). brew install talhelper","title":"Using Homebrew"},{"location":"installation/#using-nix-flakes","text":"You can get talhelper as Nix Flakes from the repository . Add the repository as input in your flake.nix file { inputs = { talhelper . url = \"github:budimanjojo/talhelper\" ; } } The package is now available at packages.<system>.default of the flake. You can call it in your home.packages or environment.systemPackages or devShell by referencing the input as inputs.talhelper.packages.<system>.default .","title":"Using Nix Flakes"},{"location":"installation/#using-aur","text":"You can get talhelper from AUR using any AUR helper if you're Arch Linux user btw. Example using yay : yay -S talhelper-bin","title":"Using AUR"},{"location":"installation/#using-scoop","text":"You can get talhelper from Scoop if you're a Windows user (thanks to @dedene ). scoop bucket add budimanjojo https :// github . com / budimanjojo / talhelper . git scoop install talhelper","title":"Using Scoop"},{"location":"installation/#using-one-liner-with-jpillora","text":"You can get talhelper using this one liner using tool provided by jpillora . curl https://i.jpillora.com/budimanjojo/talhelper! | sudo bash","title":"Using one liner with jpillora"},{"location":"installation/#from-the-release-page","text":"If none of the above works for you, you can download the archived binary for your system from the latest release page . Please let me know if you want to help with adding new installation method by creating a new issue .","title":"From the release page"},{"location":"reference/cli/","text":"CLI talhelper This command will print a long help introduction to use talhelper . Flags: -h, --help help for talhelper -v, --version show the current talhelper version talhelper completion This command will generate autocompletion script for the specified shell. Usage: talhelper completion [option] Options: bash Generate autocompletion script for `bash` shell fish Generate autocompletion script for `fish` shell powershell Generate autocompletion script for `powershell` shell zsh Generate autocompletion script for `zsh` shell Flags: -h, --help help for completion talhelper genconfig This command will generate Talos cluster configuration files. Usage: talhelper genconfig [flag] Flags: -c, --config-file string File containing configurations for talhelper (default \"talconfig.yaml\") -n, --dry-run Skip generating manifests and show diff instead -e, --env-file strings List of files containing env variables for config file (default [talenv.yaml,talenv.sops.yaml,talenv.yml,talenv.sops.yml]) -h, --help help for genconfig --no-gitignore Create/update gitignore file too talhelper gensecret This command will generate Talos cluster secrets. Usage: talhelper gensecret [flag] Flags: -f, --from-configfile string Talos cluster node configuration file to generate secret from -h, --help help for gensecret talhelper validate This command will validate the correctness of talconfig or talos node config. Usage: talhelper validate [option] [file] Option: talconfig Check the validity of Talhelper config file nodeconfig Check the validity of Talos node config file Flags: -h, --help help for validate Flags available on nodeconfig option: -m, --mode string Talos runtime mode to validate with (default \"metal\")","title":"CLI"},{"location":"reference/cli/#cli","text":"","title":"CLI"},{"location":"reference/cli/#talhelper","text":"This command will print a long help introduction to use talhelper . Flags: -h, --help help for talhelper -v, --version show the current talhelper version","title":"talhelper"},{"location":"reference/cli/#talhelper-completion","text":"This command will generate autocompletion script for the specified shell. Usage: talhelper completion [option] Options: bash Generate autocompletion script for `bash` shell fish Generate autocompletion script for `fish` shell powershell Generate autocompletion script for `powershell` shell zsh Generate autocompletion script for `zsh` shell Flags: -h, --help help for completion","title":"talhelper completion"},{"location":"reference/cli/#talhelper-genconfig","text":"This command will generate Talos cluster configuration files. Usage: talhelper genconfig [flag] Flags: -c, --config-file string File containing configurations for talhelper (default \"talconfig.yaml\") -n, --dry-run Skip generating manifests and show diff instead -e, --env-file strings List of files containing env variables for config file (default [talenv.yaml,talenv.sops.yaml,talenv.yml,talenv.sops.yml]) -h, --help help for genconfig --no-gitignore Create/update gitignore file too","title":"talhelper genconfig"},{"location":"reference/cli/#talhelper-gensecret","text":"This command will generate Talos cluster secrets. Usage: talhelper gensecret [flag] Flags: -f, --from-configfile string Talos cluster node configuration file to generate secret from -h, --help help for gensecret","title":"talhelper gensecret"},{"location":"reference/cli/#talhelper-validate","text":"This command will validate the correctness of talconfig or talos node config. Usage: talhelper validate [option] [file] Option: talconfig Check the validity of Talhelper config file nodeconfig Check the validity of Talos node config file Flags: -h, --help help for validate Flags available on nodeconfig option: -m, --mode string Talos runtime mode to validate with (default \"metal\")","title":"talhelper validate"},{"location":"reference/configuration/","text":"Configuration Config Package config contains all the options available for configuring a Talos cluster. Field Type Description Default Value Required clusterName string Configures the cluster's name. Show example clusterName : my-cluster \"\" endpoint string Configures the cluster's controlplane endpoint. Can be an IP address or a DNS hostname Show example endpoint : https://192.168.200.10:6443 \"\" nodes [] Node List of nodes configurations Show example nodes : - hostname : kmaster1 ipAddress : 192.168.200.11 controlPlane : true installDiskSelector : size : 128GB - hostname : kworker1 ipAddress : 192.168.200.12 controlPlane : false installDisk : /dev/sda networkInterfaces : - interface : eth0 dhcp : true [] talosImageURL string Allows for supplying the image used to perform the installation. Show example talosImageURL : ghcr.io/siderolabs/installer \"ghcr.io/siderolabs/installer\" talosVersion string Talos version to perform the installation. Image reference for each Talos release can be found on Talos GitHub release page Show example talosVersion : v1.5.2 \"latest\" kubernetesVersion string Allows for supplying the Kubernetes version to use. Show example kubernetesVersion : v1.28.1 \"\" domain string Allows for supplying the domain used by Kubernetes DNS. Show example domain : mycluster.com \"cluster.local\" allowSchedulingOnMasters bool Whether to allow running workload on controlplane nodes. Show example allowSchedulingOnMasters : true false allowSchedulingOnControlPlanes bool Whether to allow running workload on controlplane nodes. It is an alias to allowSchedulingOnMasters Show example allowSchedulingOnControlPlanes : true false additionalMachineCertSans []string Extra certificate SANs for the machine's certificate. Show example additionalMachineCertSans : - 10.0.0.10 - 172.16.0.10 - 192.168.0.10 [] additionalApiServerCertSans []string Extra certificate SANs for the API server's certificate. Show example additionalApiServerCertSans : - 1.2.3.4 - 4.5.6.7 - mycluster.local [] cniConfig CNIConfig The CNI to be used for the cluster's network. Show example cniConfig : name : custom urls : - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml nil patches []string Patches to be applied to all nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] controlPlane ControlPlane Configurations targetted for controlplane nodes. Show example controlPlane : patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" nil worker Worker Configurations targetted for worker nodes. Show example worker : patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" nil Node Node defines machine configurations for each node. Field Type Description Default Value Required hostname string Configures the hostname of a node. Show example hostname : kmaster1 \"\" ipAddress string IP address where the node can be reached. Needed for endpoint and node address inside talosconfig . Show example ipAddress : 192.168.200.11 \"\" installDisk string The disk used for installation. Show example installDisk : /dev/sda \"\" talosImageURL string Allows for supplying the node level image used to perform the installation. Show example talosImageURL : factory.talos.dev/installer/e9c7ef96884d4fbc8c0a1304ccca4bb0287d766a8b4125997cb9dbe84262144e \"\" installDiskSelector InstallDiskSelector Look up disk used for installation. Required if installDisk is not specified. Show example installDiskSelector : size : 128GB model : WDC* name : /sys/block/sda/device/name busPath : /pci0000:00/0000:00:17.0/ata1/host0/target0:0:0/0:0:0:0 nil controlPlane bool Whether the node is a controlplane. Show example controlPlane : true false disableSearchDomain bool Whether to disable generating default search domain. Show example disableSearchDomain : true false machineDisks [] MachineDisk List of additional disks to partition, format, mount. Show example machineDisks : - device : /dev/disk/by-id/ata-CT500MX500SSD1_2149E5EC1D9D partitions : - mountpoint : /var/mnt/sata [] machineFiles [] MachineFile List of additional files to create inside the node. Show example machineFiles : - content : | TS_AUTHKEY=123456 permissions : 0o644 path : /var/etc/tailscale/auth.env op : create [] extensions [] InstallExtensionConfig List of additional system extensions image to install. Show example extensions : - image : ghcr.io/siderolabs/tailscale:1.44.0 [] kernelModules [] KernelModuleConfig List of additional kernel modules to load. Show example kernelModules : - name : br_netfilter parameters : - nf_conntrack_max=131072 [] nameservers []string List of nameservers for the node. Show example nameservers : - 8.8.8.8 - 1.1.1.1 [] networkInterfaces [] Device List of network interface configurations for the node. Show example networkInterfaces : - interface : enp0s1 addresses : - 192.168.2.0/24 routes : - network : 0.0.0.0/0 gateway : 192.168.2.1 metric : 1024 mtu : 1500 [] patches []string Patches to be applied to the node. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to the node. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to the node. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[] CNIConfig CNIConfig defines the CNI to be used for the cluster's network. Field Type Description Default Value Required name string Configures the name of CNI to use Can be flannel , custom none . Show example name : flannel \"\" urls []string URLs containing manifests to apply for the CNI. Must be empty for flannel and none . Show example urls : - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml [] ControlPlane ControlPlane defines machine configurations for controlplane type nodes. Field Type Description Default Value Required patches []string Patches to be applied to all controlplane nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to all controlplane nodes. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to all controlplane nodes. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[] Worker Worker defines machine configurations for worker type nodes. Field Type Description Default Value Required patches []string Patches to be applied to all worker nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to all worker nodes. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to all worker nodes. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[] InstallDiskSelector InstallDiskSelector is type of upstream Talos v1alpha1.InstallDiskSelector . MachineDisk MachineDisk is type of upstream Talos v1alpha1.MachineDisk MachineFile MachineFile is type of upstream Talos v1alpha1.MachineFile InstallExtensionConfig InstallExtensionConfig is type of upstream Talos v1alpha1.InstallExtensionConfig KernelModuleConfig KernelModuleConfig is type of upstream Talos v1alpha1.KernelModuleConfig Device Device is type of upstream Talos v1alpha1.Device","title":"Configuration"},{"location":"reference/configuration/#configuration","text":"","title":"Configuration"},{"location":"reference/configuration/#config","text":"Package config contains all the options available for configuring a Talos cluster. Field Type Description Default Value Required clusterName string Configures the cluster's name. Show example clusterName : my-cluster \"\" endpoint string Configures the cluster's controlplane endpoint. Can be an IP address or a DNS hostname Show example endpoint : https://192.168.200.10:6443 \"\" nodes [] Node List of nodes configurations Show example nodes : - hostname : kmaster1 ipAddress : 192.168.200.11 controlPlane : true installDiskSelector : size : 128GB - hostname : kworker1 ipAddress : 192.168.200.12 controlPlane : false installDisk : /dev/sda networkInterfaces : - interface : eth0 dhcp : true [] talosImageURL string Allows for supplying the image used to perform the installation. Show example talosImageURL : ghcr.io/siderolabs/installer \"ghcr.io/siderolabs/installer\" talosVersion string Talos version to perform the installation. Image reference for each Talos release can be found on Talos GitHub release page Show example talosVersion : v1.5.2 \"latest\" kubernetesVersion string Allows for supplying the Kubernetes version to use. Show example kubernetesVersion : v1.28.1 \"\" domain string Allows for supplying the domain used by Kubernetes DNS. Show example domain : mycluster.com \"cluster.local\" allowSchedulingOnMasters bool Whether to allow running workload on controlplane nodes. Show example allowSchedulingOnMasters : true false allowSchedulingOnControlPlanes bool Whether to allow running workload on controlplane nodes. It is an alias to allowSchedulingOnMasters Show example allowSchedulingOnControlPlanes : true false additionalMachineCertSans []string Extra certificate SANs for the machine's certificate. Show example additionalMachineCertSans : - 10.0.0.10 - 172.16.0.10 - 192.168.0.10 [] additionalApiServerCertSans []string Extra certificate SANs for the API server's certificate. Show example additionalApiServerCertSans : - 1.2.3.4 - 4.5.6.7 - mycluster.local [] cniConfig CNIConfig The CNI to be used for the cluster's network. Show example cniConfig : name : custom urls : - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml nil patches []string Patches to be applied to all nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] controlPlane ControlPlane Configurations targetted for controlplane nodes. Show example controlPlane : patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" nil worker Worker Configurations targetted for worker nodes. Show example worker : patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" nil","title":"Config"},{"location":"reference/configuration/#node","text":"Node defines machine configurations for each node. Field Type Description Default Value Required hostname string Configures the hostname of a node. Show example hostname : kmaster1 \"\" ipAddress string IP address where the node can be reached. Needed for endpoint and node address inside talosconfig . Show example ipAddress : 192.168.200.11 \"\" installDisk string The disk used for installation. Show example installDisk : /dev/sda \"\" talosImageURL string Allows for supplying the node level image used to perform the installation. Show example talosImageURL : factory.talos.dev/installer/e9c7ef96884d4fbc8c0a1304ccca4bb0287d766a8b4125997cb9dbe84262144e \"\" installDiskSelector InstallDiskSelector Look up disk used for installation. Required if installDisk is not specified. Show example installDiskSelector : size : 128GB model : WDC* name : /sys/block/sda/device/name busPath : /pci0000:00/0000:00:17.0/ata1/host0/target0:0:0/0:0:0:0 nil controlPlane bool Whether the node is a controlplane. Show example controlPlane : true false disableSearchDomain bool Whether to disable generating default search domain. Show example disableSearchDomain : true false machineDisks [] MachineDisk List of additional disks to partition, format, mount. Show example machineDisks : - device : /dev/disk/by-id/ata-CT500MX500SSD1_2149E5EC1D9D partitions : - mountpoint : /var/mnt/sata [] machineFiles [] MachineFile List of additional files to create inside the node. Show example machineFiles : - content : | TS_AUTHKEY=123456 permissions : 0o644 path : /var/etc/tailscale/auth.env op : create [] extensions [] InstallExtensionConfig List of additional system extensions image to install. Show example extensions : - image : ghcr.io/siderolabs/tailscale:1.44.0 [] kernelModules [] KernelModuleConfig List of additional kernel modules to load. Show example kernelModules : - name : br_netfilter parameters : - nf_conntrack_max=131072 [] nameservers []string List of nameservers for the node. Show example nameservers : - 8.8.8.8 - 1.1.1.1 [] networkInterfaces [] Device List of network interface configurations for the node. Show example networkInterfaces : - interface : enp0s1 addresses : - 192.168.2.0/24 routes : - network : 0.0.0.0/0 gateway : 192.168.2.1 metric : 1024 mtu : 1500 [] patches []string Patches to be applied to the node. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to the node. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to the node. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[]","title":"Node"},{"location":"reference/configuration/#cniconfig","text":"CNIConfig defines the CNI to be used for the cluster's network. Field Type Description Default Value Required name string Configures the name of CNI to use Can be flannel , custom none . Show example name : flannel \"\" urls []string URLs containing manifests to apply for the CNI. Must be empty for flannel and none . Show example urls : - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml []","title":"CNIConfig"},{"location":"reference/configuration/#controlplane","text":"ControlPlane defines machine configurations for controlplane type nodes. Field Type Description Default Value Required patches []string Patches to be applied to all controlplane nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to all controlplane nodes. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to all controlplane nodes. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[]","title":"ControlPlane"},{"location":"reference/configuration/#worker","text":"Worker defines machine configurations for worker type nodes. Field Type Description Default Value Required patches []string Patches to be applied to all worker nodes. List of strings containing RFC6902 JSON patches, strategic merge patches, or a file containing them. Show example patches : - |- - op: add path: /machine/kubelet/extraArgs value: rotate-server-certificates: \"true\" - |- machine: env: MYENV: value - \"@./a-patch.yaml\" [] configPatches []map[string]interface{} DEPRECATED, use patches instead . List of RFC6902 JSON patches to be applied to all worker nodes. Show example configPatches : - op : add path : /machine/install/extraKernelArgs value : - console=ttyS1 [] inlinePatch map[string]interface{} DEPRECATED, use patches instead . Strategic merge patches to be applied to all worker nodes. Show example inlinePatch : machine : network : interfaces : - interface : eth0 addresses : [ 192.168.200.11/24 ] map[]","title":"Worker"},{"location":"reference/configuration/#installdiskselector","text":"InstallDiskSelector is type of upstream Talos v1alpha1.InstallDiskSelector .","title":"InstallDiskSelector"},{"location":"reference/configuration/#machinedisk","text":"MachineDisk is type of upstream Talos v1alpha1.MachineDisk","title":"MachineDisk"},{"location":"reference/configuration/#machinefile","text":"MachineFile is type of upstream Talos v1alpha1.MachineFile","title":"MachineFile"},{"location":"reference/configuration/#installextensionconfig","text":"InstallExtensionConfig is type of upstream Talos v1alpha1.InstallExtensionConfig","title":"InstallExtensionConfig"},{"location":"reference/configuration/#kernelmoduleconfig","text":"KernelModuleConfig is type of upstream Talos v1alpha1.KernelModuleConfig","title":"KernelModuleConfig"},{"location":"reference/configuration/#device","text":"Device is type of upstream Talos v1alpha1.Device","title":"Device"},{"location":"reference/supported-version/","text":"Supported Talos Versions Currently, the supported major and minor Talos versions are: v1.2 v1.3 v1.4 v1.5 v1.6","title":"Supported Talos Versions"},{"location":"reference/supported-version/#supported-talos-versions","text":"Currently, the supported major and minor Talos versions are: v1.2 v1.3 v1.4 v1.5 v1.6","title":"Supported Talos Versions"}]}